#!/usr/bin/perl
use strict;
use warnings;
use DBI;
use CGI;
use XML::RSS;
use POSIX;
my %cfg = do 'config.pl';

# set datetime range from when documents should be listed; can be
# specified by CGI parameters 'since' and 'until'. If only 'since' is
# given, until defaults to now, if neither is given, lists all
# documents from yesterday (so that the feed content doesn't change
# during the day, with repeated entries):
my $cgi = new CGI;
$cgi->charset("utf-8");
print $cgi->header('text/xml');

my $since = $cgi->param('since');
my $until = $cgi->param('until');
if (!$since) {
    my $yesterday = time() - 24*60*60;
    $since = strftime("%Y-%m-%d 00:00:00", localtime($yesterday));
    $until = strftime("%Y-%m-%d 23:59:59", localtime($yesterday));
}
elsif (!$until) {
    $until = strftime("%Y-%m-%d 23:59:59", localtime());
}

my $dbh = DBI->connect('DBI:mysql:'.$cfg{'MYSQL_DB'}, $cfg{'MYSQL_USER'},
                       $cfg{'MYSQL_PASS'}, { RaiseError => 1 }) 
    or die "Couldn't connect to database: " . DBI->errstr;
my $select = $dbh->prepare(<<SQL);
   SELECT documents.*, locations.url, locations.filetype
   FROM documents
   INNER JOIN locations ON documents.document_id = locations.document_id
   WHERE documents.found_date > ?
   AND documents.found_date < ?
   AND documents.meta_confidence > $cfg{'CONFIDENCE_THRESHOLD'}
   AND locations.spamminess < $cfg{'SPAM_THRESHOLD'}
   AND locations.status = 1
   GROUP BY documents.document_id
   LIMIT 1000
SQL
$select->execute($since, $until) or die DBI->errstr;

my $rss = new XML::RSS (version => '1.0');
$rss->channel(
    title        => "opp-tools",
    link         => "http://github.com/wo/opp-tools/",
    description  => "",
    );

while (my $row = $select->fetchrow_hashref) {
    my @authors = split(/\s*,\s*/, $row->{authors});
    $rss->add_item(
        title       => $row->{title},
        link        => $row->{url},
        description => $row->{abstract},
        format      => $row->{filetype},
        identifier  => $row->{document_id},
        dc => {
            creator  => \@authors,
        }
    );
}

print $rss->as_string;
