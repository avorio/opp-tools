#! /usr/bin/perl -w
use strict;
use warnings;
binmode STDOUT, ":utf8";
use DBI;
use Digest::MD5;
use Getopt::Std;
use AI::Categorizer::Learner::NaiveBayes;
use Algorithm::NaiveBayes::Model::Frequency;
use lib '../';
use util::Io;
use Converter;
use Spamfilter;
my %cfg = do 'config.pl';

$cfg{'TEMPDIR'}       = $cfg{'PATH'}.'temp/';
$cfg{'RPDF'}          = $cfg{'PATH'}.'rpdf/rpdf';
$cfg{'RTF2PDF'}       = $cfg{'PATH'}.'util/rtf2pdf.sh';
$cfg{'SPAMCORPUS'}    = $cfg{'PATH'}.'spamcorpus/';

my %opts;
getopts("b", \%opts);
if (!@ARGV) {
    print <<EOF;

Run the spam filter on a document, for testing.

Usage: $0 [-b] <url or id>

-b        : run only the Bayesian filter, without the additional heuristics

EOF
    exit;
}

my $url = shift @ARGV;
if ($url =~ /^\d+$/) {
    my $dbh = DBI->connect('DBI:mysql:'.$cfg{'MYSQL_DB'}, $cfg{'MYSQL_USER'},
                           $cfg{'MYSQL_PASS'}, { RaiseError => 1 }) 
        or die "Couldn't connect to database: " . DBI->errstr;
    ($url) = $dbh->selectrow_array(
        "SELECT url FROM locations WHERE document_id = '$url'");
    die "ID not in database" unless ($url);
}
print "fetching $url.\n";
my $res = fetch_url($url);
if (!$res || !$res->is_success || !$res->content) {
    print "Download failed.\n";
    exit;
}
my $filetype = $res->{filetype};
my $fname = Digest::MD5::md5_hex($url);
my $file = $cfg{'TEMPDIR'}.$fname.'.'.$filetype;
if (!save("$file", $res->content)) {
    error("cannot save file $file");
}
Converter::cfg(\%cfg);
Converter::verbosity(2);
my $text = convert2text("$file");
if ($opts{'b'}) {
    my $nb = AI::Categorizer::Learner::NaiveBayes->restore_state($cfg{'SPAMCORPUS'}.'filterstate');
    $nb->verbose(3);
    my $ai_doc = AI::Categorizer::Document->new(content => $text);
    my $ai_res = $nb->categorize($ai_doc);
    exit;
}
else {
    $res->{text} = $text;
    Spamfilter::cfg(\%cfg);
    Spamfilter::verbosity(3);
    my $is_spam = classify($res);
    print "spam score: $is_spam.\n";
}

